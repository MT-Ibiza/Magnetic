// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  email            String   @unique
  name             String
  password         String
  image            String?
  phone            String?
  countryCodePhone String?
  countryNamePhone String?
  active           Boolean  @default(true)
  role             Role     @default(client)
  packageId        Int? // Relación con Package
  package          Package? @relation(fields: [packageId], references: [id]) // Relación con Package
  cart             Cart?
  orders           Order[]

  @@index([email])
}

model Service {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String
  description String?
  serviceType ServiceType @default(none)
  items       Item[]
  packageId   Int
  package     Package     @relation(fields: [packageId], references: [id])
  providerId  Int?
  provider    Provider?   @relation(fields: [providerId], references: [id])
}

model Category {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  description String?
  items       Item[]
}

model BoatAttributes {
  id                    Int      @id @default(autoincrement())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  boatType              String
  berth                 String
  guests                Int
  crew                  Int
  beamInCentimeters     Int
  cabins                Int
  fuelConsumption       Int
  description           String?
  latitude              String?
  longitude             String?
  boatSizeInCentimeters String
  itemId                Int      @unique
  item                  Item     @relation(fields: [itemId], references: [id])
}

model Item {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String
  description    String
  published      Boolean         @default(false)
  priceInCents   Int
  serviceId      Int
  service        Service         @relation(fields: [serviceId], references: [id])
  cartItems      CartItem[]
  ordenItems     OrderItem[]
  variants       ItemVariant[]
  categoryId     Int?
  category       Category?       @relation(fields: [categoryId], references: [id])
  boatAttributes BoatAttributes?
}

model ItemVariant {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String
  description  String?
  priceInCents Int
  itemId       Int
  item         Item     @relation(fields: [itemId], references: [id])
}

model Package {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String    @unique
  description  String?
  features     String?
  priceInCents Int       @default(1)
  services     Service[]
  users        User[]
}

model Provider {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  phone     String?
  website   String?
  email     String?
  script    String?
  services  Service[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  itemId    Int
  item      Item     @relation(fields: [itemId], references: [id])
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id           Int         @id @default(autoincrement())
  userId       Int
  user         User        @relation(fields: [userId], references: [id])
  items        OrderItem[]
  totalInCents Int
  status       String      @default("pending")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id           Int      @id @default(autoincrement())
  quantity     Int // Cantidad del item en la orden
  priceInCents Int // Precio al momento de la orden
  itemId       Int
  item         Item     @relation(fields: [itemId], references: [id])
  orderId      Int
  order        Order    @relation(fields: [orderId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  client
  admin
}

enum ServiceType {
  cart_rental
  boat_rental
  transfer
  chefs
  food
  drinks
  security
  spa
  wellness
  childcare
  reservations
  none
}
