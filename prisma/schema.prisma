// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int       @id @default(autoincrement())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  email                 String    @unique
  name                  String
  firstName             String    @default("")
  lastName              String    @default("")
  accommodation         String    @default("")
  arrivalDate           DateTime?
  departureDate         DateTime?
  passportNumber        String?
  passportAttachmentUrl String?
  billingAddress        String?
  password              String
  image                 String?
  phone                 String?
  countryCodePhone      String?
  countryNamePhone      String?
  companyName           String?
  active                Boolean   @default(true)
  role                  Role      @default(client)
  packageId             Int?
  package               Package?  @relation(fields: [packageId], references: [id]) // Relaci√≥n con Package
  cart                  Cart?
  orders                Order[]

  @@index([email])
}

model Service {
  id                 Int                @id @default(autoincrement())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  name               String             @unique
  description        String?
  serviceType        ServiceType        @default(none)
  items              Item[]
  script             String?
  imageUrl           String?
  termsAndConditions String?
  instructions       String?
  position           Int                @default(1)
  packages           Package[]          @relation("PackageServices")
  providerId         Int?
  provider           Provider?          @relation(fields: [providerId], references: [id])
  forms              OrderBookingForm[]
  categories         Category[]
}

model Category {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  description String?
  formType    String?
  items       Item[]
  position    Int      @default(1)
  service     Service? @relation(fields: [serviceId], references: [id])
  serviceId   Int?
}

model BoatAttributes {
  id              Int                @id @default(autoincrement())
  airtableId      String?            @unique
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  boatType        String?
  capacity        Int                @default(1)
  beamInMeters    Int                @default(1)
  sizeInFeet      Int                @default(1)
  lengthInMeters  Int                @default(1)
  crew            Int
  cabins          Int
  fuelConsumption Int
  port            String?
  secondName      String?
  description     String?
  latitude        String?
  longitude       String?
  iCal            String?
  itemId          Int                @unique
  item            Item               @relation(fields: [itemId], references: [id], onDelete: Cascade)
  availability    BoatAvailability[]
}

model BoatAvailability {
  id        Int            @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  boatId    Int
  source    String         @default("app")
  text      String         @default("Reservation")
  boat      BoatAttributes @relation(fields: [boatId], references: [id], onDelete: Cascade)

  @@index([boatId, startDate, endDate])
}

model DrinkAttributes {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  units     Int      @default(0)
  size      String?
  itemId    Int      @unique
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model TransferAttributes {
  id       Int  @id @default(autoincrement())
  capacity Int  @default(4)
  itemId   Int  @unique
  item     Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model ChildcareAttributes {
  id     Int  @id @default(autoincrement())
  hours  Int  @default(1)
  itemId Int  @unique
  item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model SecurityAttributes {
  id     Int  @id @default(autoincrement())
  hours  Int  @default(1)
  itemId Int  @unique
  item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Item {
  id                  Int                  @id @default(autoincrement())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  name                String
  description         String
  published           Boolean              @default(false)
  priceInCents        Int
  serviceId           Int
  position            Int                  @default(1)
  service             Service              @relation(fields: [serviceId], references: [id])
  cartItems           CartItem[]
  ordenItems          OrderItem[]
  variants            ItemVariant[]
  categoryId          Int?
  category            Category?            @relation(fields: [categoryId], references: [id])
  images              Image[]
  seasonPrices        SeasonPrice[]
  boatAttributes      BoatAttributes?
  drinkAttributes     DrinkAttributes?
  transferAttributes  TransferAttributes?
  childcareAttributes ChildcareAttributes?
  securityAttributes  SecurityAttributes?
  drinksListItems     DrinksListItem[]
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  itemId    Int
  position  Int      @default(1)
  item      Item     @relation(fields: [itemId], references: [id])
  createdAt DateTime @default(now())
}

model ItemVariant {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  name         String
  description  String?
  priceInCents Int
  capacity     Int?
  hours        Int?
  itemId       Int
  item         Item        @relation(fields: [itemId], references: [id])
  CartItem     CartItem[]
  OrderItem    OrderItem[]
}

model Package {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String    @unique
  description  String?
  features     String?
  priceInCents Int       @default(1)
  services     Service[] @relation("PackageServices")
  users        User[]
}

model Provider {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  phone     String?
  website   String?
  email     String?
  services  Service[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  forms     Json[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id           Int          @id @default(autoincrement())
  quantity     Int
  itemId       Int
  formData     Json?
  item         Item         @relation(fields: [itemId], references: [id])
  cartId       Int
  cart         Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant      ItemVariant? @relation(fields: [variantId], references: [id])
  variantId    Int?
  priceInCents Int          @default(0)
  type         String       @default("service")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model OrderBookingForm {
  id                    Int           @id @default(autoincrement())
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  cartItemId            Int? //could be associate specific item and service
  formData              Json
  orderId               Int
  date                  DateTime?
  modificationRequest   String?
  modificationResponse  String?
  cancellationRequest   String?
  cancellationResponse  String?
  refundedAmountInCents Int?
  type                  String        @default("service")
  status                BookingStatus @default(pending)
  order                 Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  serviceId             Int
  service               Service       @relation(fields: [serviceId], references: [id])
}

model Order {
  id           Int                @id @default(autoincrement())
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  userId       Int
  user         User               @relation(fields: [userId], references: [id])
  items        OrderItem[]
  totalInCents Int
  subtotal     Int                @default(0)
  feeInCents   Int                @default(0)
  vatInCents   Int                @default(0)
  status       String             @default("pending")
  forms        OrderBookingForm[]
}

model OrderItem {
  id           Int          @id @default(autoincrement())
  quantity     Int
  priceInCents Int
  itemId       Int
  item         Item         @relation(fields: [itemId], references: [id])
  orderId      Int
  order        Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant      ItemVariant? @relation(fields: [variantId], references: [id])
  type         String       @default("service")
  variantId    Int?
  cartItemId   Int?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model SeasonPrice {
  id           Int  @id @default(autoincrement())
  itemId       Int
  item         Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  startMonth   Int // 1 - 12 (January - December)
  startDay     Int // 1 - 31
  endMonth     Int // 1 - 12
  endDay       Int // 1 - 31
  priceInCents Int
}

model DrinksList {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  name        String
  slug        String           @unique
  description String
  items       DrinksListItem[]
}

model DrinksListItem {
  id              Int        @id @default(autoincrement())
  drinkItemList   DrinksList @relation(fields: [drinkItemListId], references: [id])
  drinkItemListId Int
  item            Item       @relation(fields: [itemId], references: [id])
  itemId          Int

  @@unique([drinkItemListId, itemId])
}

enum Role {
  client
  admin
}

enum ServiceType {
  cart_rental
  boat_rental
  transfer
  chefs
  food
  drinks
  security
  spa
  wellness
  childcare
  reservations
  none
}

enum BookingStatus {
  pending
  accepted
  modification_requested
  modified
  cancellation_requested
  cancelled
  refunded
  completed
}
