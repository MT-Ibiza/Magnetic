// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  email             String   @unique
  name              String
  password          String?
  typeAccount       String?
  provider          String?
  providerAccountId String?
  image             String?
  phone             String?
  countryCodePhone  String?
  countryNamePhone  String?
  active            Boolean  @default(true)
  role              Role     @default(client)
  cart              Cart?
  orders            Order[]

  @@index([email])
}

model Service {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  items       Item[]
  packageId   Int
  package     Package  @relation(fields: [packageId], references: [id])
  providerId  Int
  provider    Provider @relation(fields: [providerId], references: [id])
}

model Item {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  name         String
  description  String
  priceInCents Int
  serviceId    Int
  service      Service     @relation(fields: [serviceId], references: [id])
  cartItems    CartItem[]
  ordenItems   OrderItem[]
}

model Package {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  services  Service[]
}

model Provider {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  phone     String?
  website   String?
  email     String?
  services  Service[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  itemId    Int
  item      Item     @relation(fields: [itemId], references: [id])
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id           Int         @id @default(autoincrement())
  userId       Int
  user         User        @relation(fields: [userId], references: [id])
  items        OrderItem[]
  totalInCents Int
  status       String      @default("pending")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id           Int      @id @default(autoincrement())
  quantity     Int // Cantidad del item en la orden
  priceInCents Int // Precio al momento de la orden
  itemId       Int
  item         Item     @relation(fields: [itemId], references: [id])
  orderId      Int
  order        Order    @relation(fields: [orderId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  client
  admin
}
